// Exercise 2.4

package main

import (
	"fmt"
	"testing"

	"../data-structures/linkedlist"
)

func Partition(ll *linkedlist.LinkedList, v int) *linkedlist.LinkedList {
	less := &linkedlist.LinkedList{}
	greater := &linkedlist.LinkedList{}

	for c := ll.Head; c != nil; c = c.Next {
		if c.Value.(int) < v {
			less.Append(c.Value)
		} else {
			greater.Append(c.Value)
		}
	}

	newLL := &linkedlist.LinkedList{}

	for lc := less.Head; lc != nil; lc = lc.Next {
		newLL.Append(lc.Value)
	}

	for gc := greater.Head; gc != nil; gc = gc.Next {
		newLL.Append(gc.Value)
	}

	return newLL
}

func PartitionInPlace(ll *linkedlist.LinkedList, v int) {
	for i, c := 0, ll.Head; c != nil; {
		cv := c.Value
		fmt.Println(ll, i, cv)

		if c.Value.(int) == v {
			c = c.Next
			i++
			continue
		}

		c = c.Next
		ll.Delete(i)
		fmt.Println(ll)
		i++

		if cv.(int) > v {
			ll.Append(cv)
		} else {
			ll.Insert(0, cv)
		}
	}
}

func TestPartition(t *testing.T) {
	ll := &linkedlist.LinkedList{}
	ll.Append(6)
	ll.Append(5)
	ll.Append(4)
	ll.Append(3)
	ll.Append(2)
	ll.Append(1)

	expected := "6 -> 5 -> 4 -> 3 -> 2 -> 1"
	got := fmt.Sprint(ll)

	if got != expected {
		t.Errorf("error: got %s, expected %s", got, expected)
	}

	PartitionInPlace(ll, 4)
	fmt.Println(ll)
}
